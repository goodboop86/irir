name: Build & Deploy Register Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'app/register/**'
  pull_request:
    paths:
      - 'app/register/**'
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  SERVICE_NAME: register
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ap-northeast-1
  AWS_ASSUME_ROLE: github-actions-assume-role
  LAMBDA_FUNCTION_NAME: irir-register-pr
  INITIAL_EVENT_PATH: app/register/main/resources/cloud_lambda_event.json

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        id: build
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/irir/${{ env.SERVICE_NAME }}-pr:latest
          docker build -t $IMAGE_URI --build-arg SERVICE=${{ env.SERVICE_NAME }} .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

      # Lambda
      - name: Read JSON from path
        run: |
          INITIAL_EVENT=$(jq -c '.' $INITIAL_EVENT_PATH)
          echo "INITIAL_EVENT=$INITIAL_EVENT" >> $GITHUB_ENV

      - name: Update Lambda environment
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --environment Variables="{\"INITIAL_EVENT\":\"$INITIAL_EVENT\"}"

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.build.outputs.IMAGE_URI }}
